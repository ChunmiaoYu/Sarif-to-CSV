["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$require",["^ "],"~$Buffer",["^ ","~$prototype",["^ ","~$equals",["^ "],"~$cljs-node-io$protocols$IOFactory$",["^ "],"~$cljs-node-io$protocols$IOFactory$make_reader$arity$2",["^ "],"~$cljs-node-io$protocols$IOFactory$make_input_stream$arity$2",["^ "],"~$cljs-node-io$protocols$IOFactory$make_writer$arity$2",["^ "],"~$cljs-node-io$protocols$IOFactory$make_output_stream$arity$2",["^ "]],"~$isBuffer",["^ "]],"~$Object",["^ ","~$join",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs-node-io.core","~:imports",["^ ","~$Uri","~$goog.Uri"],"~:requires",["^ ","~$async","~$cljs.core.async","^I","^I","~$cljs.core.async.impl.protocols","^J","~$cljs-node-io.file","^K","~$cljs-node-io.streams","^L","~$cljs-node-io.protocols","^M","^E","^F"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$make-output-stream","^M","~$<!","^I","~$make-writer","^M","~$chan","^I","~$as-file","^M","~$BufferReadStream","^L","~$make-reader","^M","~$Coercions","^M","~$pipe","^I","~$Channel","^J","~$IInputStream","^M","~$File","^K","~$make-input-stream","^M","~$FileOutputStream","^L","~$FileInputStream","^L","~$alts!","^I","~$IOFactory","^M","~$IFile","^M","~$as-url","^M","~$IOutputStream","^M","~$put!","^I","~$take!","^I"],"~:defs",["^ ","~$aslurp",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","~:line",171,"~:column",7,"~:end-line",171,"~:end-column",13,"~:arglists",["~#list",["~$quote",["^1D",[["~$p","~$&","~$opts"]]]]],"~:doc","@return {!Channel} a which will receive [?err ?data]","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^1D",["~$p","^1F"]]],"^1C",["^1D",[["~$p","~$&","^1F"]]],"~:arglists-meta",["^1D",[null]]]],"^B","~$cljs-node-io.core/aslurp","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",13,"^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$p","^1F"]]],"^1C",["^1D",[["~$p","~$&","^1F"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$p","^1F"]]],"~:protocol-impl",null,"^1J",1,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"~:methods",[["^ ","^1J",1,"^1I",true,"~:tag","~$any"]],"^1?",171,"~:ret-tag","^1R","^1A",171,"^1K",1,"~:fn-var",true,"^1C",["^1D",[["~$p","~$&","^1F"]]],"^1G","@return {!Channel} a which will receive [?err ?data]"],"~$rFile?",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",233,"^1@",7,"^1A",233,"^1B",13,"^1C",["^1D",["^1E",["^1D",[["~$o"]]]]],"^1G","@param {*} o\n   @return {!boolean}"],"^B","~$cljs-node-io.core/rFile?","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",13,"^1L",["^1D",[["~$o"]]],"^1O",null,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1?",233,"^1S","~$boolean","^1A",233,"^1K",1,"^1T",true,"^1C",["^1D",["^1E",["^1D",[["~$o"]]]]],"^1G","@param {*} o\n   @return {!boolean}"],"~$slurp",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",161,"^1@",7,"^1A",161,"^1B",12,"^1C",["^1D",["^1E",["^1D",[["~$p","~$&","^1F"]]]]],"^1G","Returns a string synchronously. Unlike JVM, does not use FileInputStream.\n   Only option at this time is :encoding\n   If :encoding \"\" (an explicit empty string), returns raw buffer instead of string.\n   @return {(string|buffer.Buffer)}","^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$p","^1F"]]],"^1C",["^1D",[["~$p","~$&","^1F"]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/slurp","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",12,"^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$p","^1F"]]],"^1C",["^1D",[["~$p","~$&","^1F"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$p","^1F"]]],"^1O",null,"^1J",1,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",1,"^1I",true,"^1Q","^1R"]],"^1?",161,"^1S","^1R","^1A",161,"^1K",1,"^1T",true,"^1C",["^1D",[["~$p","~$&","^1F"]]],"^1G","Returns a string synchronously. Unlike JVM, does not use FileInputStream.\n   Only option at this time is :encoding\n   If :encoding \"\" (an explicit empty string), returns raw buffer instead of string.\n   @return {(string|buffer.Buffer)}"],"~$make-parents",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",204,"^1@",7,"^1A",204,"^1B",19,"^1C",["^1D",["^1E",["^1D",[["~$f","~$&","~$more"]]]]],"^1G","Given the same arg(s) as for file, creates all parent directories of\n   the file they represent.\n   @return {!boolean}","^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$f","^1["]]],"^1C",["^1D",[["~$f","~$&","^1["]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/make-parents","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",19,"^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$f","^1["]]],"^1C",["^1D",[["~$f","~$&","^1["]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$f","^1["]]],"^1O",null,"^1J",1,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",1,"^1I",true,"^1Q",["^A",["^1R","~$clj-nil"]]]],"^1?",204,"^1S","^1R","^1A",204,"^1K",1,"^1T",true,"^1C",["^1D",[["~$f","~$&","^1["]]],"^1G","Given the same arg(s) as for file, creates all parent directories of\n   the file they represent.\n   @return {!boolean}"],"~$spit",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",178,"^1@",7,"^1A",178,"^1B",11,"^1C",["^1D",["^1E",["^1D",[["~$p","~$content","~$&","~$options"]]]]],"^1G","Writes content synchronously to file f.\n   :encoding {string} encoding to write the string. Ignored when content is a buffer\n   :append - {boolean} - if true add content to end of file\n   @return {nil} or throws","^1H",["^ ","^1I",true,"^1J",2,"^1K",2,"^1L",[["^1D",["~$p","^23","^24"]]],"^1C",["^1D",[["~$p","^23","~$&","^24"]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/spit","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",11,"^1H",["^ ","^1I",true,"^1J",2,"^1K",2,"^1L",[["^1D",["~$p","^23","^24"]]],"^1C",["^1D",[["~$p","^23","~$&","^24"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$p","^23","^24"]]],"^1O",null,"^1J",2,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",2,"^1I",true,"^1Q","^1R"]],"^1?",178,"^1S","^1R","^1A",178,"^1K",2,"^1T",true,"^1C",["^1D",[["~$p","^23","~$&","^24"]]],"^1G","Writes content synchronously to file f.\n   :encoding {string} encoding to write the string. Ignored when content is a buffer\n   :append - {boolean} - if true add content to end of file\n   @return {nil} or throws"],"~$Buffer?",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",148,"^1@",16,"^1A",148,"^1B",23,"^1Q","^1W","^1C",["^1D",["^1E",["^1D",[["~$b"]]]]],"^1G","sugar over Buffer.isBuffer\n   @param {*} b\n   @return {!boolean}"],"^B","~$cljs-node-io.core/Buffer?","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",23,"^1L",["^1D",[["~$b"]]],"^1O",null,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1?",148,"^1S","^1W","^1A",148,"^1K",1,"^1Q","^1W","^1T",true,"^1C",["^1D",["^1E",["^1D",[["~$b"]]]]],"^1G","sugar over Buffer.isBuffer\n   @param {*} b\n   @return {!boolean}"],"~$delete-file",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",105,"^1@",7,"^1A",105,"^1B",18,"^1C",["^1D",["^1E",["^1D",[["~$f","~$&",["~$silently"]]]]]],"^1G","Delete file f. Raise an exception if it fails unless silently is true.\n   @return {!boolean}","^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$f",["^29"]]]],"^1C",["^1D",[["~$f","~$&",["^29"]]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/delete-file","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",18,"^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$f",["^29"]]]],"^1C",["^1D",[["~$f","~$&",["^29"]]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$f",["^29"]]]],"^1O",null,"^1J",1,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",1,"^1I",true,"^1Q","^1R"]],"^1?",105,"^1S","^1R","^1A",105,"^1K",1,"^1T",true,"^1C",["^1D",[["~$f","~$&",["^29"]]]],"^1G","Delete file f. Raise an exception if it fails unless silently is true.\n   @return {!boolean}"],"~$path",["^ ","^B","~$cljs-node-io.core/path","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",11,"^1@",1,"^1A",11,"^1B",10,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",11,"^1@",6,"^1A",11,"^1B",10],"^1Q","~$js"],"~$input-stream",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",130,"^1@",7,"^1A",130,"^1B",19,"^1C",["^1D",["^1E",["^1D",[["~$x","~$&","^1F"]]]]],"^1G","For all streams it defers back to the stream. Note: stream objects are event driven.\n    + buffers => BufferReadStream\n    + files + strings => FileInputStream\n    + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IInputStream}","^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$x","^1F"]]],"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/input-stream","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",19,"^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$x","^1F"]]],"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$x","^1F"]]],"^1O",null,"^1J",1,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",1,"^1I",true,"^1Q","^1R"]],"^1?",130,"^1S","^1R","^1A",130,"^1K",1,"^1T",true,"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1G","For all streams it defers back to the stream. Note: stream objects are event driven.\n    + buffers => BufferReadStream\n    + files + strings => FileInputStream\n    + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IInputStream}"],"~$Error?",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",155,"^1@",16,"^1A",155,"^1B",22,"^1Q","^1W","^1C",["^1D",["^1E",["^1D",[["~$e"]]]]],"^1G","@param {*} e\n   @return {!boolean}"],"^B","~$cljs-node-io.core/Error?","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",22,"^1L",["^1D",[["~$e"]]],"^1O",null,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1?",155,"^1S","^1W","^1A",155,"^1K",1,"^1Q","^1W","^1T",true,"^1C",["^1D",["^1E",["^1D",[["~$e"]]]]],"^1G","@param {*} e\n   @return {!boolean}"],"~$as-relative-path",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",83,"^1@",7,"^1A",83,"^1B",23,"^1C",["^1D",["^1E",["^1D",[["~$x"]]]]],"^1G","a relative path, else IllegalArgumentException.\n   @param {(string|IFile|Uri)} x\n   @return {!string}"],"^B","~$cljs-node-io.core/as-relative-path","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",23,"^1L",["^1D",[["~$x"]]],"^1O",null,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1?",83,"^1S","^1R","^1A",83,"^1K",1,"^1T",true,"^1C",["^1D",["^1E",["^1D",[["~$x"]]]]],"^1G","a relative path, else IllegalArgumentException.\n   @param {(string|IFile|Uri)} x\n   @return {!string}"],"~$copy",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",273,"^1@",7,"^1A",273,"^1B",11,"^1C",["^1D",["^1E",["^1D",[["~$input","~$output","~$&","^1F"]]]]],"^1G","A repl/script convenience. Copies input to output.\n   Input may be an InputStream, cljs-node-io.File, Buffer, or string(file path).\n   Output may be an String(file), OutputStream or cljs-node-io.File.\n    + Unlike JVM, strings are coerced to files.\n      - If you have a big string, use a buffer.\n      - By default no encoding ops occur\n    + Options are passed to the output stream.\n      - :encoding = destination encoding to use\n        ex: (copy 'foo.txt' 'bar.txt' :encoding 'utf8')\n    + Returns a chan thats closes when output finishes writing\n      - use to asynchronously chain a series of calls.\n      - Will still throw! For more sophisticated error handling,\n        use the underlying streams manually\n   @return {!Channel}","^1H",["^ ","^1I",true,"^1J",2,"^1K",2,"^1L",[["^1D",["^2E","^2F","^1F"]]],"^1C",["^1D",[["^2E","^2F","~$&","^1F"]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/copy","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",11,"^1H",["^ ","^1I",true,"^1J",2,"^1K",2,"^1L",[["^1D",["^2E","^2F","^1F"]]],"^1C",["^1D",[["^2E","^2F","~$&","^1F"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["^2E","^2F","^1F"]]],"^1O",null,"^1J",2,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",2,"^1I",true,"^1Q","^1R"]],"^1?",273,"^1S","^1R","^1A",273,"^1K",2,"^1T",true,"^1C",["^1D",[["^2E","^2F","~$&","^1F"]]],"^1G","A repl/script convenience. Copies input to output.\n   Input may be an InputStream, cljs-node-io.File, Buffer, or string(file path).\n   Output may be an String(file), OutputStream or cljs-node-io.File.\n    + Unlike JVM, strings are coerced to files.\n      - If you have a big string, use a buffer.\n      - By default no encoding ops occur\n    + Options are passed to the output stream.\n      - :encoding = destination encoding to use\n        ex: (copy 'foo.txt' 'bar.txt' :encoding 'utf8')\n    + Returns a chan thats closes when output finishes writing\n      - use to asynchronously chain a series of calls.\n      - Will still throw! For more sophisticated error handling,\n        use the underlying streams manually\n   @return {!Channel}"],"~$input-stream?",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",212,"^1@",16,"^1A",212,"^1B",29,"^1Q","^1W","^1C",["^1D",["^1E",["^1D",[["~$obj"]]]]],"^1G","@param {*} obj object to test\n   @return {!boolean} is object an input-stream?"],"^B","~$cljs-node-io.core/input-stream?","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",29,"^1L",["^1D",[["^2I"]]],"^1O",null,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1?",212,"^1S","^1W","^1A",212,"^1K",1,"^1Q","^1W","^1T",true,"^1C",["^1D",["^1E",["^1D",[["^2I"]]]]],"^1G","@param {*} obj object to test\n   @return {!boolean} is object an input-stream?"],"~$filepath",["^ ","^1<",null,"^1=",["^ ","~:private",true,"^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",16,"^1H",["^ ","^1I",false,"^1J",2,"^1K",2,"^1L",[["~$a"],["~$a","~$b"]],"^1C",["^1D",[["~$a"],["~$a","~$b"]]],"^1M",["^1D",[null,null]]],"^1@",8,"^1?",17,"^1A",17,"^1C",["^1D",["^1E",["^1D",[["~$a"],["~$a","~$b"]]]]],"^1G","This is needed to mock the java.io.File constructor.\n   The java File constructor is polymorphic and accepts one or two args:\n   (Uri), (pathstring), (parentstring, childstring), (File, childstring)\n   @return {!string}"],"^2L",true,"^B","~$cljs-node-io.core/filepath","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",16,"^1H",["^ ","^1I",false,"^1J",2,"^1K",2,"^1L",[["~$a"],["~$a","~$b"]],"^1C",["^1D",[["~$a"],["~$a","~$b"]]],"^1M",["^1D",[null,null]]],"^1L",[["~$a"],["~$a","~$b"]],"^1O",null,"^1J",2,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1P",[["^ ","^1J",1,"^1I",false,"^1Q","^1R"],["^ ","^1J",2,"^1I",false,"^1Q",["^A",[null,"^1R"]]]],"^1?",17,"^1A",17,"^1K",2,"^1T",true,"^1C",["^1D",[["~$a"],["~$a","~$b"]]],"^1G","This is needed to mock the java.io.File constructor.\n   The java File constructor is polymorphic and accepts one or two args:\n   (Uri), (pathstring), (parentstring, childstring), (File, childstring)\n   @return {!string}"],"~$output-stream",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",139,"^1@",7,"^1A",139,"^1B",20,"^1C",["^1D",["^1E",["^1D",[["~$x","~$&","^1F"]]]]],"^1G","For all streams it defers back to the stream. Note: stream objects are event driven.\n   + Files & Strings become FileOutputStreams.\n   + goog.Uri's are treated as local files. No other protocols are supported at\n   this time.\n   @return {!IOutputStream}","^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$x","^1F"]]],"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/output-stream","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",20,"^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$x","^1F"]]],"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$x","^1F"]]],"^1O",null,"^1J",1,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",1,"^1I",true,"^1Q","^1R"]],"^1?",139,"^1S","^1R","^1A",139,"^1K",1,"^1T",true,"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1G","For all streams it defers back to the stream. Note: stream objects are event driven.\n   + Files & Strings become FileOutputStreams.\n   + goog.Uri's are treated as local files. No other protocols are supported at\n   this time.\n   @return {!IOutputStream}"],"~$file",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",93,"^1@",7,"^1A",93,"^1B",11,"^1C",["^1D",["^1E",["^1D",[["~$arg"],["~$parent","~$child"],["^2R","^2S","~$&","^1["]]]]],"^1G","Returns a reified file, passing each arg to as-file.  Multiple-arg\n   versions treat the first argument as parent and subsequent args as\n   children relative to the parent. Use in place of File constructor\n   @return {!IFile}","^1H",["^ ","^1I",true,"^1J",2,"^1K",2,"^1L",[["^2Q"],["^2R","^2S"]],"^1C",["^1D",[["^2Q"],["^2R","^2S"],["^2R","^2S","~$&","^1["]]],"^1M",["^1D",[null,null,null]]]],"^B","~$cljs-node-io.core/file","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",11,"^1H",["^ ","^1I",true,"^1J",2,"^1K",2,"^1L",[["^2Q"],["^2R","^2S"]],"^1C",["^1D",[["^2Q"],["^2R","^2S"],["^2R","^2S","~$&","^1["]]],"^1M",["^1D",[null,null,null]]],"^1L",[["^2Q"],["^2R","^2S"]],"^1O",null,"^1J",2,"^1M",["^1D",[null,null,null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",1,"^1I",false,"^1Q","^1R"],["^ ","^1J",2,"^1I",false,"^1Q","~$cljs-node-io.file/File"],["^ ","^1J",2,"^1I",true,"^1Q",["^A",[null,"^1R"]]]],"^1?",93,"^1A",93,"^1K",2,"^1T",true,"^1C",["^1D",[["^2Q"],["^2R","^2S"],["^2R","^2S","~$&","^1["]]],"^1G","Returns a reified file, passing each arg to as-file.  Multiple-arg\n   versions treat the first argument as parent and subsequent args as\n   children relative to the parent. Use in place of File constructor\n   @return {!IFile}"],"~$file-seq",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",196,"^1@",7,"^1A",196,"^1B",15,"^1C",["^1D",["^1E",["^1D",[["~$dir"]]]]],"^1G","taken from clojurescript/examples/nodels.cljs"],"^B","~$cljs-node-io.core/file-seq","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",15,"^1L",["^1D",[["^2W"]]],"^1O",null,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1?",196,"^1S","~$cljs.core/LazySeq","^1A",196,"^1K",1,"^1T",true,"^1C",["^1D",["^1E",["^1D",[["^2W"]]]]],"^1G","taken from clojurescript/examples/nodels.cljs"],"~$aspit",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",188,"^1@",7,"^1A",188,"^1B",12,"^1C",["^1D",["^1E",["^1D",[["~$p","^23","~$&","^24"]]]]],"^1G","Async spit. Wait for result before writing again!\n   @return {!Channel} recieves [?err]","^1H",["^ ","^1I",true,"^1J",2,"^1K",2,"^1L",[["^1D",["~$p","^23","^24"]]],"^1C",["^1D",[["~$p","^23","~$&","^24"]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/aspit","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",12,"^1H",["^ ","^1I",true,"^1J",2,"^1K",2,"^1L",[["^1D",["~$p","^23","^24"]]],"^1C",["^1D",[["~$p","^23","~$&","^24"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$p","^23","^24"]]],"^1O",null,"^1J",2,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",2,"^1I",true,"^1Q","^1R"]],"^1?",188,"^1S","^1R","^1A",188,"^1K",2,"^1T",true,"^1C",["^1D",[["~$p","^23","~$&","^24"]]],"^1G","Async spit. Wait for result before writing again!\n   @return {!Channel} recieves [?err]"],"~$do-copy",["^ ","^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",243,"^1@",3,"^1A",243,"^1B",10,"^1G","Internal helper for copy","^2L",true,"^1C",["^1D",["^1E",["^1D",[["^2E","^2F","^1F"]]]]]],"^2L",true,"^B","~$cljs-node-io.core/do-copy","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",10,"^1@",1,"^1?",239,"^1A",243,"^1Q","~$cljs.core/MultiFn","^1C",["^1D",["^1E",["^1D",[["^2E","^2F","^1F"]]]]],"^1G","Internal helper for copy"],"~$stream-type",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",224,"^1@",7,"^1A",224,"^1B",18,"^1C",["^1D",["^1E",["^1D",[["^2I"]]]]],"^1G","@param {*} obj The object to test"],"^B","~$cljs-node-io.core/stream-type","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",18,"^1L",["^1D",[["^2I"]]],"^1O",null,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1?",224,"^1S",["^A",["~$cljs.core/Keyword","^21"]],"^1A",224,"^1K",1,"^1T",true,"^1C",["^1D",["^1E",["^1D",[["^2I"]]]]],"^1G","@param {*} obj The object to test"],"~$output-stream?",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",218,"^1@",16,"^1A",218,"^1B",30,"^1Q","^1W","^1C",["^1D",["^1E",["^1D",[["^2I"]]]]],"^1G","@param {*} obj object to test\n   @return {!boolean} is object an input-stream?"],"^B","~$cljs-node-io.core/output-stream?","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",30,"^1L",["^1D",[["^2I"]]],"^1O",null,"^1M",["^1D",[null,null]],"^1@",1,"^1I",false,"^1?",218,"^1S","^1W","^1A",218,"^1K",1,"^1Q","^1W","^1T",true,"^1C",["^1D",["^1E",["^1D",[["^2I"]]]]],"^1G","@param {*} obj object to test\n   @return {!boolean} is object an input-stream?"],"~$writer",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",122,"^1@",7,"^1A",122,"^1B",13,"^1C",["^1D",["^1E",["^1D",[["~$x","~$&","^1F"]]]]],"^1G","For all streams it defers back to the stream. Note: stream objects are event driven.\n    + Files & Strings become FileOutputStreams.\n    + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IOutputStream}","^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$x","^1F"]]],"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/writer","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",13,"^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$x","^1F"]]],"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$x","^1F"]]],"^1O",null,"^1J",1,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",1,"^1I",true,"^1Q","^1R"]],"^1?",122,"^1S","^1R","^1A",122,"^1K",1,"^1T",true,"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1G","For all streams it defers back to the stream. Note: stream objects are event driven.\n    + Files & Strings become FileOutputStreams.\n    + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IOutputStream}"],"~$reader",["^ ","^1<",null,"^1=",["^ ","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1?",113,"^1@",7,"^1A",113,"^1B",13,"^1C",["^1D",["^1E",["^1D",[["~$x","~$&","^1F"]]]]],"^1G","For all streams it defers back to the stream. Note: stream objects are event driven.\n     + buffers => BufferReadStream\n     + files + strings => FileInputStream\n     + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IInputStream}","^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$x","^1F"]]],"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1M",["^1D",[null]]]],"^B","~$cljs-node-io.core/reader","^1>","/Users/brad/.cljs/.aot_cache/1.10.758/2A5B0B6/cljs_node_io/core.cljs","^1B",13,"^1H",["^ ","^1I",true,"^1J",1,"^1K",1,"^1L",[["^1D",["~$x","^1F"]]],"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1M",["^1D",[null]]],"^1L",[["^1D",["~$x","^1F"]]],"^1O",null,"^1J",1,"^1M",["^1D",[null]],"^1@",1,"^1I",true,"^1P",[["^ ","^1J",1,"^1I",true,"^1Q","^1R"]],"^1?",113,"^1S","^1R","^1A",113,"^1K",1,"^1T",true,"^1C",["^1D",[["~$x","~$&","^1F"]]],"^1G","For all streams it defers back to the stream. Note: stream objects are event driven.\n     + buffers => BufferReadStream\n     + files + strings => FileInputStream\n     + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IInputStream}"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^H","^I","^I","^I"],"~:cljs.analyzer/constants",["^ ","~:seen",["^A",["~:encoding","~:else","~:default","~:File","~:OutputStream","~:InputStream","~:hierarchy"]],"~:order",["^3A","^3@","^3E","^3D","^3F","^3C","^3B"]],"^1G",null]